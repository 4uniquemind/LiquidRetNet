import torch
import torch.nn as nn
from torchdiffeq import odeint
import torch.optim as optim

class RetainModule(nn.Module):
    def __init__(self, hidden_dim, decay):
        super().__init__()
        self.h_linear = nn.Linear(hidden_dim, hidden_dim)
        self.seq_linear = nn.Linear(hidden_dim, hidden_dim)
        self.decay = decay
        self.norm = nn.LayerNorm(hidden_dim)

    def forward(self, h, seq):
        seq = self.seq_linear(seq)
        h = self.h_linear(h)
        h = self.norm(h * self.decay + seq)
        return h

class LiquidODENet(nn.Module):
    def __init__(self, hidden_dim, tau, A):
        super().__init__()
        self.linear = nn.Linear(hidden_dim, hidden_dim)
        self.tau = tau
        self.A = A
        self.norm = nn.LayerNorm(hidden_dim)

    def forward(self, t, h):
        f = torch.tanh(self.linear(h))
        dhdt = self.norm(-h/self.tau + f*(self.A - h))
        return dhdt

class PositionalEncoding(nn.Module):
    def __init__(self, hidden_dim, dropout=0.1, max_len=5000):
        super(PositionalEncoding, self).__init__()
        self.dropout = nn.Dropout(p=dropout)

        pe = torch.zeros(max_len, hidden_dim)
        position = torch.arange(0, max_len, dtype=torch.float).unsqueeze(1)
        div_term = torch.exp(torch.arange(0, hidden_dim, 2).float() * (-torch.log(torch.tensor(10000.0)) / hidden_dim))
        pe[:, 0::2] = torch.sin(position * div_term)
        pe[:, 1::2] = torch.cos(position * div_term)
        pe = pe.unsqueeze(0).transpose(0, 1)
        self.register_buffer('pe', pe)

    def forward(self, x):
        x = x + self.pe[:x.size(0), :]
        return self.dropout(x)

class LiquidRetNet(nn.Module):
    def __init__(self, input_dim, hidden_dim, num_layers, num_heads, tau, A, decay):
        super(LiquidRetNet, self).__init__()

        self.linear = nn.Linear(input_dim, hidden_dim)
        self.pe = PositionalEncoding(hidden_dim)
        self.retain = nn.ModuleList([RetainModule(hidden_dim, decay) for _ in range(num_layers)])
        self.ode = LiquidODENet(hidden_dim, tau, A)
        self.norm = nn.LayerNorm(hidden_dim)
        self.attn = nn.MultiheadAttention(hidden_dim, num_heads)
        self.dropout = nn.Dropout(0.1)
        self.decoder = nn.Linear(hidden_dim, input_dim)

    def forward(self, x):
        x = self.pe(self.linear(x))
        
        for retain in self.retain:
            x = retain(x, x)
        
        t = torch.linspace(0, 1, steps=x.size(0))
        x = odeint(self.ode, x, t)[-1, :, :]

        x = self.norm(x)
        x, _ = self.attn(x, x, x)
        x = self.dropout(x)
        x = x + x
        x = self.decoder(x)

        return x

model = LiquidRetNet(input_dim=10, hidden_dim=20, num_layers=3, num_heads=2, tau=10, A=0.5, decay=0.9)

input = torch.randn(10, 32, 10)
output = model(input)

loss_fn = nn.MSELoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

loss = loss_fn(output, torch.zeros(10, 32, 10))
loss.backward()
optimizer.step()
